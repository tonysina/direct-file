services:
  db:
    image: postgres:15
    container_name: direct-file-db
    restart: always
    # the postgres docker image defaults to uid and gid 999, optionally override it with our env vars
    user: "${DF_DB_USER_ID:-999}:${DF_DB_GROUP_ID:-999}"
    entrypoint: "/bin/bash"
    command: -c "chown -R ${DF_DB_USER_ID:-999}:${DF_DB_GROUP_ID:-999} /var/lib/postgresql/data & exec /usr/local/bin/docker-entrypoint.sh postgres"
    environment: &dbuser
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - "./docker/db/postgres/init:/docker-entrypoint-initdb.d:ro"
      - "./docker/db/postgres/data:/var/lib/postgresql/data"
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_DB_PORT:-5435}:5432"
    healthcheck: &dbhealth
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    stop_grace_period: 60s


  state-api-db:
    image: postgres:15
    container_name: state-api-db
    restart: always
    # the postgres docker image defaults to uid and gid 999, optionally override it with our env vars
    user: "${STATEAPI_DB_USER_ID:-999}:${STATEAPI_DB_GROUP_ID:-999}"
    entrypoint: "/bin/bash"
    command: -c "chown -R ${DF_DB_USER_ID:-999}:${DF_DB_GROUP_ID:-999} /var/lib/postgresql/data & exec /usr/local/bin/docker-entrypoint.sh postgres"
    environment: *dbuser
    volumes:
      - "./state-api/docker/db/postgres/init:/docker-entrypoint-initdb.d:ro"
      - "./state-api/docker/db/postgres/data:/var/lib/postgresql/data"
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${STATEAPI_DB_PORT:-5433}:5432"
    healthcheck: *dbhealth
    stop_grace_period: 60s


  email-service-db:
    image: postgres:15
    container_name: email-service-db
    restart: always
    # the postgres docker image defaults to uid and gid 999, optionally override it with our env vars
    user: "${DF_EMAIL_DB_USER_ID:-999}:${DF_EMAIL_DB_GROUP_ID:-999}"
    entrypoint: "/bin/bash"
    command: -c "chown -R ${DF_DB_USER_ID:-999}:${DF_DB_GROUP_ID:-999} /var/lib/postgresql/data & exec /usr/local/bin/docker-entrypoint.sh postgres"
    environment: *dbuser
    volumes:
      - "./email-service/docker/db/postgres/init:/docker-entrypoint-initdb.d:ro"
      - "./email-service/docker/db/postgres/data:/var/lib/postgresql/data"
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_EMAIL_DB_PORT:-5434}:5432"
    healthcheck: *dbhealth
    stop_grace_period: 60s


  api:
    container_name: direct-file-api
    build:
      context: ./backend
      dockerfile: Dockerfile-local
      additional_contexts:
        factgraph-repo: ./fact-graph-scala
        shared-libs: ./libs
        boms: ./boms
        config: ./config
        scripts: ./scripts
      args:
        MAVEN_OPTS: "${MAVEN_OPTS:-}"
    read_only: true
    environment:
      SPRING_PROFILES_ACTIVE: development,docker
      DF_API_PORT: "${DF_API_PORT:-5000}"
      DF_API_PUBLIC_PATH: "/df/file/api"
      DF_FE_PORT: "${DF_FE_PORT:-3000}"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      JAVA_TOOL_OPTIONS: "${JAVA_TOOL_OPTIONS:-}"
      OTEL_SERVICE_NAME: "direct-file-api"
      LOCAL_WRAPPING_KEY: ${LOCAL_WRAPPING_KEY}
      DF_SUBMIT_PORT: "${DF_SUBMIT_PORT:-8083}"
      GIT_COMMIT_HASH: "${GIT_COMMIT_HASH:-}"
      DF_TIN_VALIDATION_ENABLED: ${DF_TIN_VALIDATION_ENABLED:-true}
      DF_EMAIL_VALIDATION_ENABLED: ${DF_EMAIL_VALIDATION_ENABLED:-true}
      SUBMIT_EFIN: ${SUBMIT_EFIN:-333333}
      SUBMIT_EFIN_ERO: ${SUBMIT_EFIN_ERO:-444444}
      SUBMIT_ID_VAR_CHARS: ${SUBMIT_ID_VAR_CHARS:-do}
    volumes:
      - type: tmpfs
        target: /tmp
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_API_PORT:-8080}:${DF_API_PORT:-8080}"


  csp-simulator:
    container_name: direct-file-csp-simulator
    build:
      context: ./utils/csp-simulator
    environment:
      FLASK_RUN_HOST: "0.0.0.0"
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      CSPSIM_BACKEND_BASE_URL: "http://host.docker.internal:${DF_API_PORT:-8080}"
      CSPSIM_BACKEND_BASE_PATH: "${DF_API_PUBLIC_PATH:-/df/file/api}"
      CSPSIM_CLIENT_BASE_URL: "http://host.docker.internal:${DF_FE_PORT:-3000}"
      CSPSIM_CLIENT_BASE_PATH: "${DF_CLIENT_PUBLIC_PATH:-/df/file}"
      CSPSIM_DATABASE_FILE: "/tmp/csp_simulator.sqlite3"
      CSPSIM_FAKE_PUBLIC_IP_ADDRESS_TO_PREPEND_TO_X_FORWARDED_FOR: "${CSPSIM_FAKE_PUBLIC_IP_ADDRESS_TO_PREPEND_TO_X_FORWARDED_FOR:-76.122.220.120}"
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_CSPSIM_PORT:-5000}:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"



  screener:
    container_name: direct-file-screener
    build:
      context: ./df-client
      dockerfile: Dockerfile-static-site-local
      args:
        ENABLE_SCREENER_EGAIN_CHAT: "0"
        ENABLE_SCREENER_EGAIN_CHAT_NON_PROD: "0"
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_SCREENER_PORT:-3500}:3500"

#  df-client:
#    container_name: direct-file-app
#    build:
#      context: ./df-client
#      dockerfile: Dockerfile-local
#      additional_contexts:
#        backend: ./backend
#      args:
#        DF_CLIENT_PUBLIC_PATH: "/df/file"
#        DF_API_PUBLIC_PATH: "/df/file/api"
#        DF_API_PORT: "${DF_CSPSIM_PORT:-8080}"
#        ENABLE_EGAIN_CHAT: "0"
#    ports:
#      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_FE_PORT:-3000}:3000"

  email-service:
    container_name: direct-file-email-service
    build:
      context: ./email-service
      dockerfile: Dockerfile-local
      additional_contexts:
        factgraph-repo: ./fact-graph-scala
        shared-libs: ./libs
        boms: ./boms
        config: ./config
      args:
        MAVEN_OPTS: "${MAVEN_OPTS:-}"
    read_only: true
    environment:
      SMTP_USERNAME: "${SMTP_USERNAME:-}"
      SMTP_PASSWORD: "${SMTP_PASSWORD:-}"
      SPRING_PROFILES_ACTIVE: docker,blackhole
      LOCAL_WRAPPING_KEY: ${LOCAL_WRAPPING_KEY}
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      JAVA_TOOL_OPTIONS: "${JAVA_TOOL_OPTIONS:-}"
      OTEL_SERVICE_NAME: "direct-file-email"
    volumes:
      - type: tmpfs
        target: /tmp
    depends_on:
      email-service-db:
        condition: service_healthy
      localstack:
        condition: service_healthy

  state-api:
    container_name: state-api
    build:
      context: ./state-api
      dockerfile: Dockerfile-local
      additional_contexts:
        factgraph-repo: ./fact-graph-scala
        boms: ./boms
        shared-libs: ./libs
        config: ./config
      args:
        MAVEN_OPTS: "${MAVEN_OPTS:-}"
    read_only: true
    environment:
      LOCAL_WRAPPING_KEY: ${LOCAL_WRAPPING_KEY}
      SPRING_PROFILES_ACTIVE: development,docker
      STATEAPI_PORT: "${STATEAPI_PORT:-8081}"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      JAVA_TOOL_OPTIONS: "${JAVA_TOOL_OPTIONS:-}"
      OTEL_SERVICE_NAME: "direct-file-state-api"
    volumes:
      - type: tmpfs
        target: /tmp
    depends_on:
      state-api-db:
        condition: service_healthy
      localstack:
        condition: service_healthy
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${STATEAPI_PORT:-8081}:${STATEAPI_PORT:-8080}"


  localstack:
    container_name: localstack
    image: localstack/localstack
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:4566:4566" # LocalStack Gateway
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:4510-4559:4510-4559" # external services port range
    environment:
      - LOCALSTACK_HOST=localstack # where services are available from other containers
      - SERVICES=s3,sqs,sqs-query,kms,sns,iam,lambda,logs
      - DISABLE_EVENTS=1 # disable analytics
      - LAMBDA_RUNTIME_ENVIRONMENT_TIMEOUT=60  # Set to 60 seconds for Lambda to cold start
    volumes:
      - "./docker/localstack/volume:/var/lib/localstack"
      - ./docker/localstack/localstack-script.sh:/etc/localstack/init/ready.d/script.sh
      - ./docker/localstack/policies:/etc/localstack/policies
      - ./backend/docker/localstack/feature-flags.json:/etc/localstack/init/ready.d/feature-flags.json
      # TODO: Remove when state-api sample testing data no longer needed?
      - ./state-api/docker/localstack/sample-tax-return.xml:/etc/localstack/init/ready.d/sample-tax-return.xml
      - ./state-api/docker/localstack/fakestate.cer:/etc/localstack/init/ready.d/fakestate.cer
      - ./state-api/docker/localstack/fakestate_expired.cer:/etc/localstack/init/ready.d/fakestate_expired.cer
      # /TODO
      - "/var/run/docker.sock:/var/run/docker.sock" # Docker socket mount for Lambda support
    networks:
      default:
        aliases:
          - s3.localhost.localstack.cloud
          - direct-file-taxreturns.s3.localhost.localstack.cloud
          - operations-jobs.s3.localhost.localstack.cloud

  otel-collector:
    container_name: direct-file-otel-collector
    image: otel/opentelemetry-collector-contrib
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_OTEL_PORT:-8888}:8888"
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_OTEL_EXPORT_PORT:-8889}:8889"
    profiles:
      - monitoring

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: quay.io/prometheus/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus_data:/prometheus
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_PROMETHEUS_PORT:-9090}:9090"
    profiles:
      - monitoring

  grafana:
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - ./monitoring/grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./monitoring/grafana/config.monitoring
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_GRAFANA_PORT:-3030}:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring
  wiremock:
    restart: unless-stopped
    image: "wiremock/wiremock:latest"
    container_name: wiremock
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:${DF_MOCKS_PORT:-5002}:8080"
    volumes:
      - ./utils/wiremock/extensions:/var/wiremock/extensions
      - ./utils/wiremock/__files:/home/wiremock/__files
      - ./utils/wiremock/mappings:/home/wiremock/mappings
    entrypoint:
      [
        "/docker-entrypoint.sh",
        "--global-response-templating",
        "--disable-gzip",
        "--verbose",
      ]

  redis:
    container_name: redis
    image: redis:7.0
    ports:
      - "${DF_LISTEN_ADDRESS:-127.0.0.1}:6379:6379"
